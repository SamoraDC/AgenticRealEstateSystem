[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agentic-real-estate"
version = "1.0.0"
description = "Sistema Agêntico de IA para Busca e Agendamento de Imóveis usando LangGraph-Swarm + PydanticAI"
authors = [
    {name = "SamoraDC", email = "samora.davi@hotmail.com"}
]
readme = "README.md"
license = {text = "MIT"}# ... existing code ...
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "respx>=0.20.0",  
    
    # Code quality
    "ruff>=0.5.0",
    "black>=24.0.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
    
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
]
# ... existing code ...
requires-python = ">=3.11"
keywords = ["ai", "real-estate", "langgraph", "swarm", "pydantic-ai", "agents"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core LangGraph (sem LangChain)
    "langgraph>=0.2.0",
    "langgraph-checkpoint>=2.0.0",
    # PydanticAI para lógica de agentes
    "pydantic-ai[logfire,openrouter]>=0.0.14",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
    # MCP Support para PydanticAI
    "fastmcp>=0.1.0",
    # Modelos LLM
    "openai>=1.40.0", # Para compatibilidade OpenAI
    # Utilitários essenciais
    "httpx>=0.27.0",
    "asyncio-mqtt>=0.16.0",
    "redis>=5.0.0",
    # Observabilidade
    "logfire>=0.51.0",
    "structlog>=24.1.0",
    "langsmith>=0.1.0",
    # Dados e validação
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "geopy>=2.4.0",
    # Utilitários
    "python-dotenv>=1.0.0",
    "typer>=0.12.0",
    "rich>=13.7.0",
    # APIs externas
    "google-auth>=2.29.0",
    "google-auth-oauthlib>=1.2.0",
    "google-auth-httplib2>=0.2.0",
    "google-api-python-client>=2.130.0",
    "requests>=2.32.4",
    "fastapi>=0.115.13",
    "uvicorn>=0.34.3",
    "python-multipart>=0.0.20",
    "aiohttp>=3.12.13",
    "langchain-openai>=0.3.25",
    "google-generativeai>=0.8.5",
    "groq>=0.28.0",
    "duckdb>=1.3.2",
    "pytz>=2025.2",
    "langgraph-swarm>=0.0.11",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "respx>=0.20.0",
    
    # Code quality
    "ruff>=0.5.0",
    "black>=24.0.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
    
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
]

production = [
    # Production server
    "uvicorn[standard]>=0.30.0",
    "gunicorn>=22.0.0",
    
    # Monitoring
    "prometheus-client>=0.20.0",
    "sentry-sdk>=2.5.0",
    
    # Performance
    "orjson>=3.10.0",
    "uvloop>=0.19.0",
]

# mcp = [
#     # MCP Server para APIs externas - Temporariamente desabilitado
#     # "mcp>=1.0.0",
#     # "mcp-server-stdio>=1.0.0",
# ]

[project.urls]
Homepage = "https://github.com/agentic-real-estate/agentic-real-estate"
Documentation = "https://agentic-real-estate.readthedocs.io"
Repository = "https://github.com/agentic-real-estate/agentic-real-estate"
Issues = "https://github.com/agentic-real-estate/agentic-real-estate/issues"

[project.scripts]
agentic-real-estate = "main:main"

[tool.hatch.build.targets.wheel]
packages = ["app", "config"]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=app {args:tests}"
cov-report = [
    "pytest --cov=app --cov-report=term-missing {args:tests}",
    "coverage html",
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "ruff",
    "black",
    "mypy",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:app config}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

# Configuração do Ruff (linter/formatter)
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101"]

[tool.ruff.isort]
known-first-party = ["app", "config"]

# Configuração do Black
[tool.black]
target-version = ['py311']
line-length = 100
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Configuração do MyPy
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langgraph.*",
    "pydantic_ai.*",
    "logfire.*",
    "geopy.*",
    "google.*",
]
ignore_missing_imports = true

# Configuração do Pytest
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Configuração do Coverage
[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
