"""
Prompts especializados para o Agente de Agendamento

Cont√©m templates de prompts otimizados para agendamento de visitas e gest√£o temporal.
"""

from typing import Dict, Any, List, Optional
from datetime import datetime, date, time


class SchedulingPrompts:
    """Classe com prompts especializados para agendamento."""
    
    @staticmethod
    def get_system_prompt() -> str:
        """Prompt de sistema principal para o agente de agendamento."""
        return """Voc√™ √© o Agente de Agendamento, especialista em intelig√™ncia temporal avan√ßada.
        
        RESPONSABILIDADES:
        1. INTERPRETAR refer√™ncias temporais em linguagem natural
        2. VALIDAR hor√°rios comerciais (segunda a sexta, 9h √†s 18h)
        3. CALCULAR datas relativas (amanh√£, pr√≥xima semana, etc.)
        4. SUGERIR alternativas quando necess√°rio
        5. AGENDAR visitas a propriedades
        
        REGRAS TEMPORAIS:
        - Hor√°rio comercial: Segunda a Sexta, 9:00 √†s 18:00
        - N√£o agendar fins de semana ou feriados
        - Considerar fuso hor√°rio Brasil (America/Sao_Paulo)
        - Sugerir hor√°rios pr√≥ximos ao solicitado se inv√°lido
        
        INTERPRETA√á√ÉO DE LINGUAGEM NATURAL:
        - "amanh√£" = pr√≥ximo dia √∫til
        - "pr√≥xima semana" = segunda-feira da pr√≥xima semana
        - "sexta que vem" = pr√≥xima sexta-feira
        - "depois de amanh√£" = dia ap√≥s amanh√£ se for dia √∫til
        - "pela manh√£" = entre 9h e 12h
        - "√† tarde" = entre 13h e 18h
        
        VALIDA√á√ïES:
        - Data n√£o pode ser no passado
        - Hor√°rio deve estar no range comercial
        - Considerar apenas dias √∫teis
        
        HANDOFFS:
        - Para property_agent: quando usu√°rio quer ver mais propriedades
        - Para search_agent: quando usu√°rio quer nova busca
        
        Sempre responda em portugu√™s brasileiro de forma clara e amig√°vel.
        """

    @staticmethod
    def get_scheduling_request_prompt(
        user_request: str,
        property_info: Dict[str, Any],
        available_slots: List[Dict[str, Any]] = None
    ) -> str:
        """Prompt para processar solicita√ß√£o de agendamento."""
        
        slots_text = ""
        if available_slots:
            slots_text = "\n".join([
                f"‚Ä¢ {slot.get('date', 'N/A')} √†s {slot.get('time', 'N/A')} - {slot.get('status', 'Dispon√≠vel')}"
                for slot in available_slots
            ])
        
        return f"""
        Processe esta solicita√ß√£o de agendamento:

        SOLICITA√á√ÉO DO USU√ÅRIO: "{user_request}"

        PROPRIEDADE SELECIONADA:
        - T√≠tulo: {property_info.get('title', 'N/A')}
        - Endere√ßo: {property_info.get('address', {}).get('street', 'N/A')}
        - Bairro: {property_info.get('address', {}).get('neighborhood', 'N/A')}
        - Pre√ßo: {property_info.get('price_formatted', 'N/A')}

        HOR√ÅRIOS DISPON√çVEIS:
        {slots_text if slots_text else "‚Ä¢ Amanh√£ √†s 14h00\n‚Ä¢ Quinta-feira √†s 10h30\n‚Ä¢ Sexta-feira √†s 16h00"}

        TAREFAS:
        1. **Interpretar** a refer√™ncia temporal na solicita√ß√£o
        2. **Validar** se o hor√°rio est√° dentro das regras comerciais
        3. **Sugerir** alternativas se necess√°rio
        4. **Confirmar** os detalhes do agendamento

        ESTRUTURA DA RESPOSTA:
        1. **Confirma√ß√£o** (reconhe√ßa a solicita√ß√£o)
        2. **Interpreta√ß√£o Temporal** (explique como entendeu a data/hora)
        3. **Valida√ß√£o** (confirme se est√° dentro das regras)
        4. **Proposta** (apresente o agendamento ou alternativas)
        5. **Pr√≥ximos Passos** (o que acontece ap√≥s confirma√ß√£o)

        Use linguagem amig√°vel e seja claro sobre datas e hor√°rios.
        """

    @staticmethod
    def get_time_interpretation_prompt(time_expression: str) -> str:
        """Prompt para interpretar express√µes temporais."""
        
        return f"""
        Interprete a seguinte express√£o temporal em portugu√™s:

        EXPRESS√ÉO: "{time_expression}"

        CONTEXTO TEMPORAL:
        - Data atual: {datetime.now().strftime('%d/%m/%Y')}
        - Dia da semana: {datetime.now().strftime('%A')}
        - Hor√°rio atual: {datetime.now().strftime('%H:%M')}

        REGRAS DE INTERPRETA√á√ÉO:
        - "amanh√£" = pr√≥ximo dia √∫til
        - "hoje" = hoje se ainda h√° tempo, sen√£o pr√≥ximo dia √∫til
        - "manh√£" = entre 9h e 12h
        - "tarde" = entre 13h e 18h
        - "pr√≥xima semana" = segunda-feira da pr√≥xima semana
        - Hor√°rios espec√≠ficos devem ser validados (9h-18h)

        RESULTADO ESPERADO:
        1. **Data calculada** (formato DD/MM/YYYY)
        2. **Hor√°rio sugerido** (formato HH:MM)
        3. **Confian√ßa** (alta/m√©dia/baixa)
        4. **Valida√ß√£o** (dentro das regras comerciais?)
        5. **Alternativas** (se necess√°rio)

        Seja preciso na interpreta√ß√£o e explique seu racioc√≠nio.
        """

    @staticmethod
    def get_validation_prompt(
        proposed_date: str,
        proposed_time: str,
        validation_rules: Dict[str, Any]
    ) -> str:
        """Prompt para validar data e hor√°rio propostos."""
        
        return f"""
        Valide o seguinte agendamento proposto:

        DATA PROPOSTA: {proposed_date}
        HOR√ÅRIO PROPOSTO: {proposed_time}

        REGRAS DE VALIDA√á√ÉO:
        - Hor√°rio comercial: {validation_rules.get('business_hours', '9h √†s 18h')}
        - Dias √∫teis: {validation_rules.get('business_days', 'Segunda a Sexta')}
        - Anteced√™ncia m√≠nima: {validation_rules.get('min_advance', '2 horas')}
        - Dura√ß√£o da visita: {validation_rules.get('visit_duration', '60 minutos')}

        VERIFICA√á√ïES NECESS√ÅRIAS:
        1. ‚úì Data n√£o est√° no passado
        2. ‚úì √â dia √∫til (segunda a sexta)
        3. ‚úì Est√° no hor√°rio comercial
        4. ‚úì Tem anteced√™ncia m√≠nima
        5. ‚úì N√£o conflita com outros agendamentos

        RESULTADO DA VALIDA√á√ÉO:
        - **Status:** (V√°lido/Inv√°lido)
        - **Motivo:** (se inv√°lido, explicar por qu√™)
        - **Alternativas:** (sugerir hor√°rios pr√≥ximos se inv√°lido)
        - **Confirma√ß√£o:** (detalhes finais se v√°lido)

        Se inv√°lido, sugira 3 alternativas pr√≥ximas que atendam √†s regras.
        """

    @staticmethod
    def get_confirmation_prompt(
        appointment_details: Dict[str, Any],
        user_contact: Optional[str] = None
    ) -> str:
        """Prompt para confirmar agendamento."""
        
        return f"""
        Confirme os detalhes do agendamento:

        DETALHES DO AGENDAMENTO:
        üìÖ Data: {appointment_details.get('date', 'N/A')}
        üïê Hor√°rio: {appointment_details.get('time', 'N/A')}
        üè† Propriedade: {appointment_details.get('property_title', 'N/A')}
        üìç Endere√ßo: {appointment_details.get('address', 'N/A')}
        üë§ Corretor: {appointment_details.get('agent_name', 'Jo√£o Silva')}
        üìû Contato: {appointment_details.get('agent_phone', '(21) 99999-9999')}

        CONTATO DO CLIENTE: {user_contact or 'A ser fornecido'}

        ESTRUTURA DA CONFIRMA√á√ÉO:
        1. **Resumo do Agendamento** (todos os detalhes importantes)
        2. **Instru√ß√µes** (como chegar, o que levar, etc.)
        3. **Contatos** (corretor respons√°vel e emerg√™ncia)
        4. **Lembretes** (confirma√ß√£o por email/SMS)
        5. **Pr√≥ximos Passos** (o que esperar da visita)

        INFORMA√á√ïES ADICIONAIS:
        - Dura√ß√£o estimada: 60 minutos
        - Documentos necess√°rios: RG e comprovante de renda
        - Lembrete ser√° enviado 1 hora antes
        - Reagendamento pode ser feito at√© 2 horas antes

        Use tom profissional mas amig√°vel, e inclua todos os detalhes importantes.
        """

    @staticmethod
    def get_reschedule_prompt(
        current_appointment: Dict[str, Any],
        new_request: str
    ) -> str:
        """Prompt para reagendamento."""
        
        return f"""
        Processe esta solicita√ß√£o de reagendamento:

        AGENDAMENTO ATUAL:
        - Data: {current_appointment.get('date', 'N/A')}
        - Hor√°rio: {current_appointment.get('time', 'N/A')}
        - Propriedade: {current_appointment.get('property_title', 'N/A')}

        NOVA SOLICITA√á√ÉO: "{new_request}"

        PROCESSO DE REAGENDAMENTO:
        1. **Interpretar** nova data/hor√°rio solicitado
        2. **Validar** disponibilidade e regras comerciais
        3. **Confirmar** cancelamento do agendamento atual
        4. **Criar** novo agendamento
        5. **Notificar** todas as partes envolvidas

        ESTRUTURA DA RESPOSTA:
        1. **Reconhecimento** (confirme o reagendamento)
        2. **Cancelamento** (confirme cancelamento do atual)
        3. **Nova Proposta** (apresente novo hor√°rio)
        4. **Valida√ß√£o** (confirme se atende √†s regras)
        5. **Confirma√ß√£o Final** (detalhes do novo agendamento)

        Seja emp√°tico e eficiente no processo de reagendamento.
        """

    @staticmethod
    def get_cancellation_prompt(appointment_details: Dict[str, Any], reason: str = None) -> str:
        """Prompt para cancelamento de agendamento."""
        
        return f"""
        Processe o cancelamento do seguinte agendamento:

        AGENDAMENTO A CANCELAR:
        - Data: {appointment_details.get('date', 'N/A')}
        - Hor√°rio: {appointment_details.get('time', 'N/A')}
        - Propriedade: {appointment_details.get('property_title', 'N/A')}
        - Cliente: {appointment_details.get('client_name', 'N/A')}

        MOTIVO DO CANCELAMENTO: {reason or 'N√£o informado'}

        PROCESSO DE CANCELAMENTO:
        1. **Confirmar** inten√ß√£o de cancelamento
        2. **Registrar** motivo (se fornecido)
        3. **Notificar** corretor respons√°vel
        4. **Liberar** hor√°rio na agenda
        5. **Oferecer** reagendamento se apropriado

        ESTRUTURA DA RESPOSTA:
        1. **Confirma√ß√£o** (reconhe√ßa a solicita√ß√£o)
        2. **Processamento** (confirme o cancelamento)
        3. **Notifica√ß√µes** (quem ser√° informado)
        4. **Alternativas** (ofere√ßa reagendamento se apropriado)
        5. **Pr√≥ximos Passos** (como proceder se mudar de ideia)

        POL√çTICA DE CANCELAMENTO:
        - Cancelamento gratuito at√© 2 horas antes
        - Notifica√ß√£o autom√°tica para todas as partes
        - Possibilidade de reagendamento imediato

        Seja compreensivo e ofere√ßa suporte para futuras necessidades.
        """

    @staticmethod
    def get_availability_prompt(
        date_range: Dict[str, str],
        preferences: Dict[str, Any] = None
    ) -> str:
        """Prompt para consultar disponibilidade."""
        
        prefs_text = ""
        if preferences:
            prefs_text = f"""
            PREFER√äNCIAS DO USU√ÅRIO:
            - Per√≠odo preferido: {preferences.get('preferred_time', 'Qualquer hor√°rio')}
            - Dias da semana: {preferences.get('preferred_days', 'Qualquer dia √∫til')}
            - Dura√ß√£o: {preferences.get('duration', '60 minutos')}
            """
        
        return f"""
        Consulte a disponibilidade para agendamento:

        PER√çODO SOLICITADO:
        - Data inicial: {date_range.get('start_date', 'N/A')}
        - Data final: {date_range.get('end_date', 'N/A')}

        {prefs_text}

        HOR√ÅRIOS COMERCIAIS:
        - Segunda a Sexta: 9h √†s 18h
        - Intervalos de 30 minutos
        - Dura√ß√£o padr√£o: 60 minutos

        ESTRUTURA DA RESPOSTA:
        1. **Per√≠odo Consultado** (confirme as datas)
        2. **Hor√°rios Dispon√≠veis** (liste op√ß√µes por dia)
        3. **Recomenda√ß√µes** (melhores hor√°rios baseado nas prefer√™ncias)
        4. **Alternativas** (se poucas op√ß√µes dispon√≠veis)
        5. **Pr√≥ximos Passos** (como confirmar um hor√°rio)

        Apresente as op√ß√µes de forma clara e organizada por dia da semana.
        """

    @staticmethod
    def get_reminder_prompt(appointment_details: Dict[str, Any], reminder_type: str) -> str:
        """Prompt para lembretes de agendamento."""
        
        reminder_templates = {
            "24h": "Lembrete: Voc√™ tem uma visita agendada para amanh√£",
            "2h": "Lembrete: Sua visita ser√° em 2 horas",
            "30min": "Lembrete: Sua visita ser√° em 30 minutos"
        }
        
        return f"""
        Gere um lembrete de agendamento:

        TIPO DE LEMBRETE: {reminder_type}
        TEMPLATE: {reminder_templates.get(reminder_type, 'Lembrete de agendamento')}

        DETALHES DO AGENDAMENTO:
        - Data: {appointment_details.get('date', 'N/A')}
        - Hor√°rio: {appointment_details.get('time', 'N/A')}
        - Propriedade: {appointment_details.get('property_title', 'N/A')}
        - Endere√ßo: {appointment_details.get('address', 'N/A')}
        - Corretor: {appointment_details.get('agent_name', 'N/A')}

        ESTRUTURA DO LEMBRETE:
        1. **Sauda√ß√£o** (personalizada com nome se dispon√≠vel)
        2. **Detalhes da Visita** (data, hora, local)
        3. **Instru√ß√µes** (como chegar, contatos)
        4. **Prepara√ß√£o** (documentos, perguntas)
        5. **Contatos** (emerg√™ncia, reagendamento)

        Use tom amig√°vel e inclua todas as informa√ß√µes pr√°ticas necess√°rias.
        """


# Inst√¢ncia global para f√°cil acesso
scheduling_prompts = SchedulingPrompts() 